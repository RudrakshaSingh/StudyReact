hooks is used to update data of variables in ui 

------------------------------------------------------------

useState   =>const [counter, setCounter] = useState(0); //counter is variable and setCounter is function given by reacrt to update counter
it sends updates in ui in batches at single time so even if you do counter+1  multiple times
he sees all this as same work it takes it as single
        setCounter(counter + 1);
        setCounter(counter + 1);
        setCounter(counter + 1);
to avoid this and make it work each timewe useContext
        setCounter((prevCounter)=>prevCounter +1);
        setCounter((prevCounter)=>prevCounter +1);
        setCounter((prevCounter)=>prevCounter +1);
prevCounter is just name for state prev value

------------------------------------------------------------

useCallback=>useCallback is a React Hook that lets you cache a function definition between re-renders.

const cachedFn = useCallback(fn, dependencies)
dependencies can be given as array

we have a function uska return value jitna ho skta hai cache me rakhlo ,when called back use as much part of it can be used

The useCallback hook is used to memoize functions in React. It returns a memoized version of the callback function that only 
changes if one of the dependencies has changed. This can be useful in scenarios where passing callbacks to child components, 
or using them in useEffect dependencies, might cause unnecessary re-renders.
------------------------------------------------------------

useEffect=>useEffect is a React Hook that lets you synchronize a component with an external system.

ye jab page load hota hai tab run karta haiphir jabhi dependencies change hoti hai tab run hota hai

useEffect(() => {
        passwordGenerator();
    }, [length, numberAllowed, charAllowed, passwordGenerator]);
  dependencies se matlab konse component pe change hone pe password cfunction run hoga


------------------------------------------------------------

useRef=>useRef is a React Hook that lets you reference a value thatâ€™s not needed for rendering.
const ref = useRef(initialValue)

jab kisi bhi cheej ka reference lena hota hai
eg.
const passwordRef = useRef(null);
pass this ref in components
<input
    type="text"
    value={password}
    className="outline-none w-full py-1 px-3"
    placeholder="Password"
    readOnly
    ref={passwordRef}
/>

------------------------------------------------------------
useId =>useId is a React Hook for generating unique IDs that can be passed to accessibility attributes.
useId should not be used to generate keys in a list. Keys should be generated from your data.

const amountInputId = useId();
<label htmlFor={amountInputId} className="text-black/40 mb-2 inline-block">
    {label}
</label>
 <input
    id={amountInputId}
    className="outline-none w-full bg-transparent py-1.5"
    type="number"
    placeholder="Amount"
    disabled={amountDisable} //if somebody passes true in it
    value={amount}
    onChange={(e) => onAmountChange && onAmountChange(Number(e.target.value))}
/>
we binded label with input
------------------------------------------------------------

useContext
useReducer

useMemos
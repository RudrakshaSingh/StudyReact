redux-toolkit.js.org
it is a predictable state container for js apps

useDispatch reducer ka use karte hue store me value add/changes karta hai
--------------------------------------------------------
redux :state mangament library
  ->reacr-redux
changes in store can be made with function only(through reducers) not directly

--------------------------------------------------------

flux:facebook designed for state management
  -state management
  -data flow(but not good then redux was introduced as better version of it)
  -central store

--------------------------------------------------------
problems in redux lead to REDUX-TOOLKIT

redux-toolkit
  -store
  -reducers

STARTING-
  npm install @reduxjs/toolkit
If you need React bindings:
  npm install react-redux

-------------------------------------------------

What's Included
Redux Toolkit includes these APIs:

configureStore(): wraps createStore to provide simplified configuration options and good defaults. It can automatically combine your slice reducers, adds whatever Redux middleware you supply, includes redux-thunk by default, and enables use of the Redux DevTools Extension.
createReducer(): that lets you supply a lookup table of action types to case reducer functions, rather than writing switch statements. In addition, it automatically uses the immer library to let you write simpler immutable updates with normal mutative code, like state.todos[3].completed = true.
createAction(): generates an action creator function for the given action type string.
createSlice(): accepts an object of reducer functions, a slice name, and an initial state value, and automatically generates a slice reducer with corresponding action creators and action types.
combineSlices(): combines multiple slices into a single reducer, and allows "lazy loading" of slices after initialisation.
createAsyncThunk: accepts an action type string and a function that returns a promise, and generates a thunk that dispatches pending/fulfilled/rejected action types based on that promise
createEntityAdapter: generates a set of reusable reducers and selectors to manage normalized data in the store
The createSelector utility from the Reselect library, re-exported for ease of use.

-----------------------------------------------------
>src 
>>app
>>>store.js

import { configureStore } from "@reduxjs/toolkit";
import todoReducer from "../features/todo/todoSlice";

export const store = configureStore({
    reducer: todoReducer,
});

-----------------------------------------------------
redux toolkit reducers or slices
in reducers function we always get access of state and action

state-give acces to initial state current state
action-values like id for removing
-----------------------------------------------------
>src
>>features
>>>todo
>>>>todoSlice.js

import { createSlice, nanoid } from "@reduxjs/toolkit";
// nanoid is for generating unique id

const initialState = {
    todos: [{ id: 1, text: "Hello World" }],
};

//the name todo is the name of the property itself
//second thing is the initial state of slice
export const todoSlice = createSlice({
    name: "todo",
    initialState,
    reducers: {
        addTodo: (state, action) => {
            const todo = {
                id: nanoid(),
                text: action.payload,
            };
            state.todos.push(todo); //updating state
        },
        removeTodo: (state, action) => {
            state.todos = state.todos.filter((todo) => {
                return todo.id !== action.payload;
            });
        },
        updateTodo: (state, action) => {
            const { id, text } = action.payload;
            state.todos = state.todos.map((todo) => {
                return todo.id === id ? { ...todo, text } : todo;
            });
        },
    },
});
//we give property and function in reducers

export const { addTodo, updateTodo, removeTodo } = todoSlice.actions;
//exported individual functionality

export default todoSlice.reducer;
